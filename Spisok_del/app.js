document.addEventListener("DOMContentLoaded", function () {
    // --- DOM –≠–ª–µ–º–µ–Ω—Ç—ã ---
    const taskList = document.getElementById("taskList");
    const completedTaskList = document.getElementById("completedTaskList");
    const taskInput = document.getElementById("taskInput");
    const addTaskBtn = document.getElementById("addTaskBtn");
    const mainCalendar = document.getElementById("mainCalendar");
    const taskFilterSelect = document.getElementById("taskFilterSelect");
    const progressBarInner = document.getElementById("progressBarInner");
    const progressPercentage = document.getElementById("progressPercentage");
    const themeSwitchCheckbox = document.getElementById("themeSwitchCheckbox");

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –°–†–û–ö–ê –í–´–ü–û–õ–ù–ï–ù–ò–Ø (üìÖ)
    const calendarIcon = document.getElementById("calendarIcon");
    const selectedDateDisplay = document.getElementById("selectedDateDisplay");
    const datePickerModal = document.getElementById("datePickerModal");
    const datePickerCalendar = document.getElementById("datePickerCalendar");
    const taskTimeInput = document.getElementById("taskTimeInput");
    const cancelDateBtn = document.getElementById("cancelDateBtn");
    const saveDateBtn = document.getElementById("saveDateBtn");

    // –≠–ª–µ–º–µ–Ω—Ç—ã –¥–ª—è –ù–ê–ü–û–ú–ò–ù–ê–ù–ò–Ø (üîî)
    const reminderIcon = document.getElementById("reminderIcon");
    const selectedReminderDisplay = document.getElementById("selectedReminderDisplay");
    const reminderDatePickerModal = document.getElementById("reminderDatePickerModal");
    const reminderDatePickerCalendar = document.getElementById("reminderDatePickerCalendar");
    const reminderTimeInput = document.getElementById("reminderTimeInput");
    const reminderFrequencySelect = document.getElementById("reminderFrequency"); // –ü–æ–ª—É—á–∞–µ–º select —á–∞—Å—Ç–æ—Ç—ã
    const cancelReminderDateBtn = document.getElementById("cancelReminderDateBtn");
    const saveReminderDateBtn = document.getElementById("saveReminderDateBtn");

    // –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–≤–∞–µ–º–æ–µ –º–æ–¥–∞–ª—å–Ω–æ–µ –æ–∫–Ω–æ –¥–µ—Ç–∞–ª–µ–π –∑–∞–¥–∞—á–∏
    const taskDetailsModal = document.createElement("div");
    taskDetailsModal.id = "taskDetailsModal";
    taskDetailsModal.className = "modal hidden";
    document.body.appendChild(taskDetailsModal);

    // --- –î–∞–Ω–Ω—ã–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è (–°–æ—Å—Ç–æ—è–Ω–∏—è) ---
    let tasks = [];
    let completedTasks = [];
    let nextTaskId = 1;
    let currentCustomFilter = null; // –î–æ–±–∞–≤–ª—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–∞—Å—Ç–æ–º–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
    let isSelectingDates = false;
    let selectionStartDate = null;
    let selectionEndDate = null; 

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç/–≤—Ä–µ–º–µ–Ω–∏/—á–∞—Å—Ç–æ—Ç—ã
    let currentSelectedDate = null; let currentSelectedTime = null;
    let tempSelectedDate = null; let tempSelectedTime = null;
    let currentSelectedReminderDate = null; let currentSelectedReminderTime = null; let currentSelectedReminderFrequency = 'once';
    let tempSelectedReminderDate = null; let tempSelectedReminderTime = null; let tempSelectedReminderFrequency = 'once';

    // –°–æ—Å—Ç–æ—è–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞, —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è, –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π
    let currentTaskFilter = 'all';
    let currentEditingTaskId = null;
    let isEditingCompletedTask = false;
    let mainCalendarDate = new Date();
    let datePickerCalendarDate = new Date();
    let reminderPickerCalendarDate = new Date();


    // –í addEventListeners:
document.getElementById('resetSelectionBtn').addEventListener('click', resetSelection);

function resetSelection() {
    currentCustomFilter = null;
    currentTaskFilter = 'all';
    clearCalendarSelection();
    renderTasks();
} 
document.addEventListener('click', (e) => {
    if (!mainCalendar.contains(e.target)) {
        isSelectingDates = false;
    }
});
    // –î–ª—è –æ—Ç—Å–ª–µ–∂–∏–≤–∞–Ω–∏—è –ø–æ–∫–∞–∑–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
    let notifiedTaskIds = new Set();

    // --- –ó–∞–≥—Ä—É–∑–∫–∞ –∏ –ú–∏–≥—Ä–∞—Ü–∏—è –î–∞–Ω–Ω—ã—Ö ---
    function loadData() {
        try {
            tasks = JSON.parse(localStorage.getItem("tasks") || '[]') || [];
        } catch (e) {
            console.error("Error parsing tasks from localStorage:", e);
            tasks = []; // –°–±—Ä–æ—Å –∫ –ø—É—Å—Ç–æ–º—É –º–∞—Å—Å–∏–≤—É –ø—Ä–∏ –æ—à–∏–±–∫–µ
        }
        try {
            completedTasks = JSON.parse(localStorage.getItem("completedTasks") || '[]') || [];
        } catch (e) {
            console.error("Error parsing completedTasks from localStorage:", e);
            completedTasks = [];
        }
        nextTaskId = parseInt(localStorage.getItem("nextTaskId") || '1', 10);
        if (isNaN(nextTaskId) || nextTaskId < 1) {
            nextTaskId = 1; // –°–±—Ä–æ—Å, –µ—Å–ª–∏ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        }
        // –û—á–∏—Å—Ç–∫–∞ notifiedTaskIds –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ (—á—Ç–æ–±—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å—Ä–∞–±–æ—Ç–∞–ª–∏ —Å–Ω–æ–≤–∞ –ø–æ—Å–ª–µ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∫–∏)
        notifiedTaskIds = new Set();

        migrateOldTasks(); // –ó–∞–ø—É—Å–∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏
    }

    function migrateOldTasks() {
        let needsSave = false;
        function getMigrationNextId() {
            const id = nextTaskId;
            nextTaskId++;
            return id;}
        console.log("Checking for task migration...");

        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏
        tasks = tasks.map(task => {
            let taskChanged = false;
            if (task.id === undefined || task.id === null) { task.id = getMigrationNextId(); needsSave = true; taskChanged = true; console.log(`Migrated task ID for: "${task.text}" (New ID: ${task.id})`); }
            if (task.isStarred === undefined) { task.isStarred = false; taskChanged = true; }
            if (task.createdAt === undefined) { task.createdAt = new Date().toISOString(); taskChanged = true; }
            if (task.notes === undefined) { task.notes = ""; taskChanged = true; }
            if (task.dueDate === undefined) { task.dueDate = null; taskChanged = true; }
            if (task.dueTime === undefined) { task.dueTime = null; taskChanged = true; }
            if (task.reminderDate === undefined) { task.reminderDate = null; taskChanged = true; }
            if (task.reminderTime === undefined) { task.reminderTime = null; taskChanged = true; }
            if (task.reminderFrequency === undefined) { task.reminderFrequency = 'once'; taskChanged = true; } // <-- –ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã
            if (taskChanged && !needsSave) needsSave = true;
            return task;
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ –∑–∞–¥–∞—á–∏
        completedTasks = completedTasks.map(task => {
            let taskChanged = false;
            if (task.id === undefined || task.id === null) { task.id = getMigrationNextId(); needsSave = true; taskChanged = true; console.log(`Migrated completed task ID for: "${task.text}" (New ID: ${task.id})`); }
            if (task.isStarred === undefined) { task.isStarred = false; taskChanged = true; }
            if (task.createdAt === undefined) { task.createdAt = new Date(Date.now() - 86400000).toISOString(); taskChanged = true; }
            if (task.notes === undefined) { task.notes = ""; taskChanged = true; }
            if (task.completedDate === undefined) { task.completedDate = new Date().toISOString(); taskChanged = true; }
            if (task.dueDate === undefined) { task.dueDate = null; taskChanged = true; }
            if (task.dueTime === undefined) { task.dueTime = null; taskChanged = true; }
            if (task.reminderDate === undefined) { task.reminderDate = null; taskChanged = true; }
            if (task.reminderTime === undefined) { task.reminderTime = null; taskChanged = true; }
            if (task.reminderFrequency === undefined) { task.reminderFrequency = 'once'; taskChanged = true; } // <-- –ú–∏–≥—Ä–∞—Ü–∏—è —á–∞—Å—Ç–æ—Ç—ã
            if (taskChanged && !needsSave) needsSave = true;
            return task;
        });

        if (needsSave) {
            console.log("Saving migrated tasks and updated nextTaskId to localStorage...");
            try {
                localStorage.setItem("tasks", JSON.stringify(tasks));
                localStorage.setItem("completedTasks", JSON.stringify(completedTasks));
                localStorage.setItem("nextTaskId", nextTaskId.toString());
                console.log("Migration save successful.");
            } catch (error) {
                console.error("Error saving migrated data to localStorage:", error);
                alert("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á. –í–æ–∑–º–æ–∂–Ω–æ, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ.");
            }
        } else {
            console.log("No task migration needed.");
        }
    }

    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ü—Ä–∏–ª–æ–∂–µ–Ω–∏—è ---
    function initializeApp() {
        loadData(); // –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        applyInitialTheme();
        requestNotificationPermission();
        initCalendars();
        initCalendarSelection();
        addEventListeners();
        renderAll(); // –ü–µ—Ä–≤—ã–π —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥ –≤—Å–µ–≥–æ (–≤–∫–ª—é—á–∞—è –∫–∞–ª–µ–Ω–¥–∞—Ä–∏)
        highlightCalendarFilterRange(); // –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –∫–∞–ª–µ–Ω–¥–∞—Ä—è –¥–ª—è –Ω–∞—á–∞–ª—å–Ω–æ–≥–æ —Ñ–∏–ª—å—Ç—Ä–∞
        checkDueTasks(); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è —Å—Ä–∞–∑—É
        setInterval(checkDueTasks, 60 * 1000); // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
    }

    function initCalendarSelection() {
        mainCalendar.addEventListener('mousedown', handleCalendarMouseDown);
        mainCalendar.addEventListener('mouseover', handleCalendarMouseOver);
        document.addEventListener('mouseup', handleCalendarMouseUp);
    }

    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ–º–æ–π ---
    function applyInitialTheme() {
        const savedTheme = localStorage.getItem('theme');
        const isDark = savedTheme === 'dark';
        document.body.classList.toggle('dark-theme', isDark);
        if(themeSwitchCheckbox) themeSwitchCheckbox.checked = isDark;
    }
    function handleThemeSwitch() {
        const isDark = themeSwitchCheckbox.checked;
        document.body.classList.toggle('dark-theme', isDark);
        localStorage.setItem('theme', isDark ? 'dark' : 'light');
    }

    // --- –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è ---
    function requestNotificationPermission() {
        if (!("Notification" in window)) {
            console.warn("Browser does not support desktop notification");
            return;
        }
        // –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º —Ä–∞–∑—Ä–µ—à–µ–Ω–∏–µ, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω–æ –µ—â–µ –Ω–µ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–æ –∏ –Ω–µ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
        if (Notification.permission !== "granted" && Notification.permission !== 'denied') {
            Notification.requestPermission().then(permission => {
                console.log("Notification permission:", permission);
            });
        }
    }

    function checkDueTasks() {
        if (Notification.permission !== "granted") {
            // console.log("Notification permission not granted, skipping check.");
            return;
        }
        const now = new Date();

        tasks.forEach(task => {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –¥–∞—Ç–∞, –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏ –µ–≥–æ ID –µ—â–µ –Ω–µ—Ç –≤ —Å–ø–∏—Å–∫–µ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö
            if (task.reminderDate && task.reminderTime && !notifiedTaskIds.has(task.id)) {
                const reminderDateTime = parseDateSafe(`${task.reminderDate}T${task.reminderTime}`);

                if (reminderDateTime && reminderDateTime <= now) {
                    // –†–∞–∑–Ω–∏—Ü–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö —Å –º–æ–º–µ–Ω—Ç–∞ —Å—Ä–∞–±–∞—Ç—ã–≤–∞–Ω–∏—è
                    const diffMinutes = (now - reminderDateTime) / 60000;

                    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º, –µ—Å–ª–∏ –≤—Ä–µ–º—è –Ω–∞—Å—Ç–∞–ª–æ –≤ —Ç–µ—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —á–∞—Å–∞
                    // –ò–õ–ò –µ—Å–ª–∏ —á–∞—Å—Ç–æ—Ç–∞ –Ω–µ 'once' (–¥–ª—è –±—É–¥—É—â–µ–π –ª–æ–≥–∏–∫–∏ –ø–æ–≤—Ç–æ—Ä–æ–≤)
                    if (diffMinutes >= 0 && diffMinutes < 60 ) { // && task.reminderFrequency === 'once'
                        console.log("Showing notification for task:", task.id, task.text);
                        showNotification(task);
                        // –î–ª—è 'once' –¥–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞–±–æ—Ä, —á—Ç–æ–±—ã –±–æ–ª—å—à–µ –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
                        // if (task.reminderFrequency === 'once') {
                            notifiedTaskIds.add(task.id);
                        // } else {
                            // TODO: Implement logic for recurring reminders
                            // Calculate next reminder date based on frequency and update task
                            // Maybe don't add to notifiedTaskIds or manage differently
                        // }
                    }
                    // –ï—Å–ª–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—á–µ–Ω—å —Å—Ç–∞—Ä–æ–µ (–±–æ–ª—å—à–µ —á–∞—Å–∞ –Ω–∞–∑–∞–¥), –ø—Ä–æ—Å—Ç–æ –ø–æ–º–µ—á–∞–µ–º –∫–∞–∫ —Å—Ä–∞–±–æ—Ç–∞–≤—à–µ–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–æ–≤–µ—Ä—è—Ç—å —Å–Ω–æ–≤–∞
                    else if (diffMinutes >= 60 && task.reminderFrequency === 'once') {
                        notifiedTaskIds.add(task.id);
                        console.log("Skipping old one-time notification:", task.id);
                    }
                }
            }
        });
        // console.log("Checked due tasks. Notified IDs:", notifiedTaskIds);
    }

    function showNotification(task) {
        const title = "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ!";
        const options = {
            body: task.text,
            icon: "logo/sss.png", // –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –ø—É—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π
            tag: `task-${task.id}` // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç—ç–≥, —á—Ç–æ–±—ã –∑–∞–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è —Ç–æ–π –∂–µ –∑–∞–¥–∞—á–∏
        };

        try {
            const notification = new Notification(title, options);
            // –ó–∞–∫—Ä—ã—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø—Ä–∏ –∫–ª–∏–∫–µ –∏ —Å—Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∞—Ç—å—Å—è –Ω–∞ –æ–∫–Ω–µ
            notification.onclick = () => {
                window.focus();
                console.log("Notification clicked for task:", task.id);
                notification.close();
            };
        } catch (error) {
            console.error("Error showing notification:", error);
        }
    }
    // --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ —Ä–µ–Ω–¥–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä–µ–π ---
    function initCalendars() {
        mainCalendarDate = new Date();
        datePickerCalendarDate = new Date();
        reminderPickerCalendarDate = new Date();
    }
    function renderAllCalendars() {
        renderCalendar(mainCalendar, mainCalendarDate.getFullYear(), mainCalendarDate.getMonth(), false, 'main');
        // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ —Ñ–∏–ª—å—Ç—Ä–∞ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∞
    }

    // --- –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –û–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –°–æ–±—ã—Ç–∏–π ---
    function addEventListeners() {
        if (addTaskBtn) addTaskBtn.addEventListener("click", addTask);
        if (taskInput) {
            taskInput.addEventListener("keypress", handleInputKeypress);
            taskInput.addEventListener('input', handleInputChange);
        }
        if (calendarIcon) calendarIcon.addEventListener('click', openDatePickerModal);
        if (reminderIcon) reminderIcon.addEventListener('click', openReminderPickerModal);

        if (saveDateBtn) saveDateBtn.addEventListener('click', saveTaskDate);
        if (cancelDateBtn) cancelDateBtn.addEventListener('click', closeDatePickerModal);

        if (saveReminderDateBtn) saveReminderDateBtn.addEventListener('click', saveReminderDate);
        if (cancelReminderDateBtn) cancelReminderDateBtn.addEventListener('click', closeReminderPickerModal);

        if (taskFilterSelect) taskFilterSelect.addEventListener('change', handleFilterChange);
        if (themeSwitchCheckbox) themeSwitchCheckbox.addEventListener('change', handleThemeSwitch);

        if (taskList) taskList.addEventListener('click', handleTaskListClick);
        if (completedTaskList) completedTaskList.addEventListener('click', handleCompletedListClick);

        // –ó–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–æ–∫ –ø–æ –∫–ª–∏–∫—É –≤–Ω–µ –∫–æ–Ω—Ç–µ–Ω—Ç–∞
        [datePickerModal, reminderDatePickerModal, taskDetailsModal].forEach(modal => {
            if (modal) modal.addEventListener('click', closeModalOnClickOutside);
        });

        // –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º (–∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–ª–µ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã)
        if (mainCalendar) mainCalendar.addEventListener('click', handleCalendarNav);
        if (datePickerCalendar) datePickerCalendar.addEventListener('click', handleCalendarNav);
        if (reminderDatePickerCalendar) reminderDatePickerCalendar.addEventListener('click', handleCalendarNav);

        // –ö–ª–∏–∫–∏ –ø–æ –¥–Ω—è–º –≤ –º–æ–¥–∞–ª—å–Ω—ã—Ö –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
        if (datePickerCalendar) datePickerCalendar.addEventListener('click', handleModalDayClick);
        if (reminderDatePickerCalendar) reminderDatePickerCalendar.addEventListener('click', handleModalDayClick);
    }

    // --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π ---
    function handleInputKeypress(e) { if (e.key === "Enter") addTask(); }
    function handleInputChange() {
        const hasText = taskInput.value.trim().length > 0;
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–∫–æ–Ω–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å —Ç–µ–∫—Å—Ç –ò–õ–ò –µ—Å–ª–∏ –∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ (—Ç.–∫. –¥–µ—Ç–∞–ª–∏ —É–∂–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã)
        const showIcons = hasText || !!currentEditingTaskId;
        if (calendarIcon) calendarIcon.classList.toggle('visible', showIcons);
        if (reminderIcon) reminderIcon.classList.toggle('visible', showIcons);
        updateSelectedDateDisplaysVisibility(showIcons);
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –¥–∞—Ç—ã/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –µ—Å–ª–∏ –ø–æ–ª–µ –æ—á–∏—â–µ–Ω–æ –∏ –Ω–µ –∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (!hasText && !currentEditingTaskId) {
            resetCurrentDateSelection();
        }
        updateSelectedDateDisplaysContent(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±—ç–¥–∂–µ–π
    }
    function handleFilterChange() {
        currentTaskFilter = taskFilterSelect.value;
        renderTasks(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞—á
        highlightCalendarFilterRange(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    }
    function closeModalOnClickOutside(e) {
        // –ó–∞–∫—Ä—ã–≤–∞–µ–º, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∫–ª–∏–∫ –±—ã–ª –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ —Ñ–æ–Ω—É –º–æ–¥–∞–ª–∫–∏
        if (e.target === datePickerModal) closeDatePickerModal();
        if (e.target === reminderDatePickerModal) closeReminderPickerModal();
        if (e.target === taskDetailsModal) closeTaskDetailsModal();
    }
    function handleTaskListClick(e) {
        const target = e.target;
        const taskElement = target.closest('.task');
        if (!taskElement || !taskElement.dataset.id) return; // –ö–ª–∏–∫ –Ω–µ –ø–æ –∑–∞–¥–∞—á–µ
        const taskId = parseInt(taskElement.dataset.id, 10);
        if (isNaN(taskId)) { console.error("Invalid Task ID:", taskElement.dataset.id); return; }

        if (target.classList.contains('checkbox')) { // –ö–ª–∏–∫ –ø–æ —á–µ–∫–±–æ–∫—Å—É
            completeTask(taskId);
        } else if (target.classList.contains('delete-btn')) { // –ö–ª–∏–∫ –ø–æ –∫–æ—Ä–∑–∏–Ω–µ
            const task = tasks.find(t => t.id === taskId);
            if (task && confirm(`–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "${task.text}"?`)) {
                deleteTask(taskId, false);
            }
        } else if (target.classList.contains('star-btn')) { // –ö–ª–∏–∫ –ø–æ –∑–≤–µ–∑–¥–µ
            toggleStar(taskId, false);
        } else if (!target.closest('.action-btn') && !target.closest('.task-date-container')) {
            // –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É –∑–∞–¥–∞—á–∏ (–Ω–µ –ø–æ –∫–Ω–æ–ø–∫–∞–º –∏–ª–∏ –¥–∞—Ç–∞–º) -> –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏
            openTaskDetails(taskId, false);
        }
    }
    function handleCompletedListClick(e) {
        const target = e.target;
        const taskElement = target.closest('.task');
        if (!taskElement || !taskElement.dataset.id) return;
        const taskId = parseInt(taskElement.dataset.id, 10);
        if (isNaN(taskId)) { console.error("Invalid Completed Task ID:", taskElement.dataset.id); return; }

        if (target.classList.contains('checkbox')) { // –í–µ—Ä–Ω—É—Ç—å –≤ –∞–∫—Ç–∏–≤–Ω—ã–µ
            uncompleteTask(taskId);
        } else if (target.classList.contains('delete-btn')) { // –£–¥–∞–ª–∏—Ç—å –Ω–∞–≤—Å–µ–≥–¥–∞
            const task = completedTasks.find(t => t.id === taskId);
            if (task && confirm(`–ù–ê–í–°–ï–ì–î–ê —É–¥–∞–ª–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é –∑–∞–¥–∞—á—É "${task.text}"?`)) {
                deleteTask(taskId, true);
            }
        } else if (!target.closest('.action-btn') && !target.closest('.task-date-container')) {
             // –ö–ª–∏–∫ –ø–æ —Ç–µ–∫—Å—Ç—É -> –û—Ç–∫—Ä—ã—Ç—å –¥–µ—Ç–∞–ª–∏ (–≤ —Ä–µ–∂–∏–º–µ –ø—Ä–æ—Å–º–æ—Ç—Ä–∞)
             openTaskDetails(taskId, true);
        }
    }

    // --- –õ–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á (CRUD) ---
    function getNextId() {
        const id = nextTaskId;
        nextTaskId++;
        localStorage.setItem("nextTaskId", nextTaskId.toString()); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Ä–∞–∑—É
        return id;
    }

    function addTask() {
        const taskText = taskInput.value.trim();
        if (!taskText) {
            alert("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏.");
            taskInput.focus();
            return;
        }
        const todayStr = new Date().toISOString().split('T')[0];
        const effectiveDueDate = currentSelectedDate ? currentSelectedDate : todayStr;
        const effectiveDueTime = currentSelectedDate ? currentSelectedTime : null;
        const newTask = {
            id: getNextId(),
            text: taskText,
            dueDate: effectiveDueDate,
            dueTime: effectiveDueTime,
            reminderDate: currentSelectedReminderDate,
            reminderTime: currentSelectedReminderTime,
            reminderFrequency: currentSelectedReminderFrequency || 'once',
            isStarred: false,
            createdAt: new Date().toISOString(),
            notes: ""
        };
        tasks.push(newTask); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –º–∞—Å—Å–∏–≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö
        taskInput.value = ""; // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
        resetCurrentDateSelection(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è/—á–∞—Å—Ç–æ—Ç—É –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        updateSelectedDateDisplaysVisibility(false); // –°–∫—Ä—ã–≤–∞–µ–º –±—ç–¥–∂–∏
        updateSelectedDateDisplaysContent();
        handleInputChange.call(taskInput); // –û–±–Ω–æ–≤–ª—è–µ–º –≤–∏–¥–∏–º–æ—Å—Ç—å –∏–∫–æ–Ω–æ–∫
        saveAndRender(); // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≤—Å–µ
    }

    function completeTask(taskId) {
        const taskIndex = tasks.findIndex(task => task.id === taskId);
        if (taskIndex > -1) {
            const [taskToComplete] = tasks.splice(taskIndex, 1); // –£–¥–∞–ª—è–µ–º –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö
            taskToComplete.completedDate = new Date().toISOString(); // –î–æ–±–∞–≤–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            completedTasks.unshift(taskToComplete); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –Ω–∞—á–∞–ª–æ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            saveAndRender();
        } else {
            console.warn("Task not found for completion:", taskId);
        }
    }
    function uncompleteTask(taskId) {
        const taskIndex = completedTasks.findIndex(task => task.id === taskId);
        if (taskIndex > -1) {
            const [taskToUncomplete] = completedTasks.splice(taskIndex, 1); // –£–¥–∞–ª—è–µ–º –∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö
            delete taskToUncomplete.completedDate; // –£–¥–∞–ª—è–µ–º –¥–∞—Ç—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
            tasks.push(taskToUncomplete); // –î–æ–±–∞–≤–ª—è–µ–º –≤ –∫–æ–Ω–µ—Ü –∞–∫—Ç–∏–≤–Ω—ã—Ö
            saveAndRender();
        } else {
            console.warn("Task not found for uncompletion:", taskId);
        }
    }

    function deleteTask(taskId, isCompleted) {
        let initialLength;
        if (isCompleted) {
            initialLength = completedTasks.length;
            completedTasks = completedTasks.filter(task => task.id !== taskId);
            if(completedTasks.length === initialLength) console.warn("Completed task not found for deletion:", taskId);
        } else {
            initialLength = tasks.length;
            tasks = tasks.filter(task => task.id !== taskId);
            if(tasks.length === initialLength) console.warn("Active task not found for deletion:", taskId);
        }
        // –£–¥–∞–ª—è–µ–º –∏–∑ –Ω–∞–±–æ—Ä–∞ —Å—Ä–∞–±–æ—Ç–∞–≤—à–∏—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π, –µ—Å–ª–∏ –∑–∞–¥–∞—á–∞ —É–¥–∞–ª—è–µ—Ç—Å—è
        notifiedTaskIds.delete(taskId);
        saveAndRender();
    }

    function toggleStar(taskId, isCompleted) {
        if (isCompleted) return; // –ù–µ–ª—å–∑—è –∑–≤–µ–∑–¥–∏—Ç—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã–µ
        const task = tasks.find(task => task.id === taskId);
        if (task) {
            task.isStarred = !task.isStarred;
            saveAndRender(); // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º, —á—Ç–æ–±—ã –æ–±–Ω–æ–≤–∏—Ç—å –∑–≤–µ–∑–¥—É –∏ —Å–æ—Ä—Ç–∏—Ä–æ–≤–∫—É
        } else {
            console.warn("Task not found for starring:", taskId);
        }
    }

    function editTask(taskId, updatedData, isCompleted) {
        const list = isCompleted ? completedTasks : tasks;
        const taskIndex = list.findIndex(task => task.id === taskId);
        if (taskIndex > -1) {
            const originalTask = list[taskIndex];
            // –û–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, —Å–æ—Ö—Ä–∞–Ω—è—è —Å—Ç–∞—Ä—ã–µ –ø–æ–ª—è, –µ—Å–ª–∏ –æ–Ω–∏ –Ω–µ –ø–µ—Ä–µ–¥–∞–Ω—ã –≤ updatedData
            list[taskIndex] = { ...originalTask, ...updatedData };
            console.log("Task updated:", list[taskIndex]);
            // –ï—Å–ª–∏ –¥–∞—Ç–∞/–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–∑–º–µ–Ω–∏–ª–∏—Å—å, —É–¥–∞–ª—è–µ–º –∏–∑ notified, —á—Ç–æ–±—ã –æ–Ω–æ —Å—Ä–∞–±–æ—Ç–∞–ª–æ —Å–Ω–æ–≤–∞
            if (updatedData.reminderDate !== undefined || updatedData.reminderTime !== undefined) {
                notifiedTaskIds.delete(taskId);
            }
            saveAndRender();
        } else {
            console.warn(`Task ID ${taskId} not found for editing in ${isCompleted ? 'completed' : 'active'} list.`);
        }
    }

    // --- –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ ---
    function saveState() {
        try {
            localStorage.setItem("tasks", JSON.stringify(tasks));
            localStorage.setItem("completedTasks", JSON.stringify(completedTasks));
            // nextTaskId —Å–æ—Ö—Ä–∞–Ω—è–µ—Ç—Å—è –≤ getNextId
        } catch (error) {
            console.error("Error saving state to localStorage:", error);
            alert("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏. –í–æ–∑–º–æ–∂–Ω–æ, —Ö—Ä–∞–Ω–∏–ª–∏—â–µ –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–æ.");
        }
    }

    function saveAndRender() {
        saveState();
        renderAll();
    }

    function renderAll() {
        console.log("Rendering all...");
        renderTasks(); // –†–µ–Ω–¥–µ—Ä —Å–ø–∏—Å–∫–æ–≤ –∑–∞–¥–∞—á
        renderAllCalendars(); // –†–µ–Ω–¥–µ—Ä –≥–ª–∞–≤–Ω–æ–≥–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        updateCalendarHighlights(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–æ—á–µ–∫ –ø–æ–¥ –¥–∞—Ç–∞–º–∏ –≤ –≥–ª. –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
        highlightCalendarFilterRange(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—ã–¥–µ–ª–µ–Ω–∏—è –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Ñ–∏–ª—å—Ç—Ä–∞
        updateProgressBar(); // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä–∞
    }

    // --- –†–µ–Ω–¥–µ—Ä–∏–Ω–≥ –°–ø–∏—Å–∫–æ–≤ –ó–∞–¥–∞—á ---
    function renderTasks() {
        if (!taskList || !completedTaskList) return;

        taskList.innerHTML = '';
        completedTaskList.innerHTML = '';

        const filteredTasks = filterTasks(tasks, currentTaskFilter);

        // –†–µ–Ω–¥–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á
        if (filteredTasks.length === 0) {
            const message = tasks.length > 0 && currentTaskFilter !== 'all'
                ? '–ù–µ—Ç –∑–∞–¥–∞—á, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∏–ª—å—Ç—Ä—É.'
                : '–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.';
            taskList.innerHTML = `<p class="empty-list-msg">${message}</p>`;
        } else {
            filteredTasks
                // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞: —Å–Ω–∞—á–∞–ª–∞ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ, –ø–æ—Ç–æ–º –ø–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è
                .sort((a, b) => (a.isStarred !== b.isStarred ? (a.isStarred ? -1 : 1) : (new Date(a.createdAt) - new Date(b.createdAt))))
                .forEach(task => taskList.appendChild(createTaskElement(task, false)));
        }

        // –†–µ–Ω–¥–µ—Ä –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á
        if (completedTasks.length === 0) {
            completedTaskList.innerHTML = '<p class="empty-list-msg">–ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á –Ω–µ—Ç.</p>';
        } else {
            completedTasks
                // –°–æ—Ä—Ç–∏—Ä–æ–≤–∫–∞ –ø–æ –¥–∞—Ç–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Å–Ω–∞—á–∞–ª–∞ –Ω–æ–≤—ã–µ)
                .sort((a, b) => new Date(b.completedDate) - new Date(a.completedDate))
                .forEach(task => completedTaskList.appendChild(createTaskElement(task, true)));
        }
    }

    function createTaskElement(task, isCompleted) {
        const taskDiv = document.createElement("div");
        taskDiv.className = "task";
        taskDiv.dataset.id = task.id; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º ID –¥–ª—è –ª–µ–≥–∫–æ–≥–æ –¥–æ—Å—Ç—É–ø–∞

        if (task.isStarred && !isCompleted) {
            taskDiv.classList.add("starred"); // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å –¥–ª—è —Å—Ç–∏–ª—è —Ä–∞–º–∫–∏
        }
        const checkbox = document.createElement("div");
        checkbox.className = "checkbox";
        if (isCompleted) {
            checkbox.classList.add("checked");
        }
        taskDiv.appendChild(checkbox);

        // 2. –¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏
        const taskTextSpan = document.createElement("span");
        // –ò—Å–ø–æ–ª—å–∑—É–µ–º textContent –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –æ—Ç XSS
        taskTextSpan.textContent = task.text;
        if (isCompleted) {
            taskTextSpan.classList.add("completed-text");
        }
        taskDiv.appendChild(taskTextSpan);

        // 3. –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –¥–∞—Ç –∏ –∫–Ω–æ–ø–æ–∫ —Å–ø—Ä–∞–≤–∞
        const controlsContainer = document.createElement("div");
        controlsContainer.className = 'task-date-container';

        // 3a. –û–±–µ—Ä—Ç–∫–∞ —Ç–æ–ª—å–∫–æ –¥–ª—è –±—ç–¥–∂–µ–π –¥–∞—Ç
        const datesWrapper = document.createElement('div');
        datesWrapper.className = 'task-dates-wrapper';

        // –ë—ç–¥–∂ –¥–∞—Ç—ã –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if (task.dueDate) {
            const dueDateDiv = document.createElement('div');
            dueDateDiv.className = 'task-date-entry';
            // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
            dueDateDiv.innerHTML = `<span class="icon-date">üìÖ</span> ${formatDate(task.dueDate)} ${task.dueTime || ''}`.trim();
            datesWrapper.appendChild(dueDateDiv);
        }
        // –ë—ç–¥–∂ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if (task.reminderDate && task.reminderTime) {
            const reminderDateDiv = document.createElement('div');
            reminderDateDiv.className = 'task-date-entry reminder-date';
            reminderDateDiv.innerHTML = `<span class="icon-date">üîî</span> ${formatDate(task.reminderDate)} ${task.reminderTime}`;
            datesWrapper.appendChild(reminderDateDiv);
        }
        // –ë—ç–¥–∂ –¥–∞—Ç—ã –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö)
        if (isCompleted && task.completedDate) {
            const completedDateDiv = document.createElement('div');
            completedDateDiv.className = 'task-date-entry';
             // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –≤–∫–ª—é—á–µ–Ω–∏–µ–º –≤—Ä–µ–º–µ–Ω–∏, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ 00:00
            completedDateDiv.innerHTML = `<span class="icon-date">‚úÖ</span> –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${formatDate(task.completedDate, true)}`;
            datesWrapper.appendChild(completedDateDiv);
        }

        controlsContainer.appendChild(datesWrapper); // –î–æ–±–∞–≤–ª—è–µ–º –æ–±–µ—Ä—Ç–∫—É —Å –¥–∞—Ç–∞–º–∏

        // 3b. –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π –ø—Ä—è–º–æ –≤ controlsContainer
        // –ö–Ω–æ–ø–∫–∞ –ó–≤–µ–∑–¥—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–∫—Ç–∏–≤–Ω—ã—Ö)
        if (!isCompleted) {
            const starBtn = document.createElement("button");
            starBtn.className = "action-btn star-btn";
            starBtn.innerHTML = task.isStarred ? "‚òÖ" : "‚òÜ"; // –ó–∞–∫—Ä–∞—à–µ–Ω–Ω–∞—è –∏–ª–∏ –ø—É—Å—Ç–∞—è –∑–≤–µ–∑–¥–∞
            starBtn.title = task.isStarred ? "–£–±—Ä–∞—Ç—å –∏–∑ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ" : "–î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ";
            if (task.isStarred) {
                starBtn.classList.add("starred");
            }
            controlsContainer.appendChild(starBtn);
        }

        // –ö–Ω–æ–ø–∫–∞ –£–¥–∞–ª–µ–Ω–∏—è
        const deleteBtn = document.createElement("button");
        deleteBtn.className = "action-btn delete-btn";
        deleteBtn.innerHTML = "üóëÔ∏è"; // –ò–∫–æ–Ω–∫–∞ –∫–æ—Ä–∑–∏–Ω—ã
        deleteBtn.title = "–£–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É";
        controlsContainer.appendChild(deleteBtn);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤–µ—Å—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–æ–Ω—Ç—Ä–æ–ª–æ–≤ (—Å –¥–∞—Ç–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–∞–º–∏) –≤ –∑–∞–¥–∞—á—É
        taskDiv.appendChild(controlsContainer);

        return taskDiv;
    }

    // --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –ó–∞–¥–∞—á ---
    function filterTasks(tasksToFilter, filter) {
        if (!Array.isArray(tasksToFilter)) return [];

        const now = new Date();
        const today = now.toISOString().split('T')[0];

        switch (filter) {
            case 'today':
                return tasksToFilter.filter(t => t.dueDate === today);
            case 'week':
                const startOfWeek = getStartOfWeek(now).toISOString().split('T')[0];
                const endOfWeek = getEndOfWeek(now).toISOString().split('T')[0];
                return tasksToFilter.filter(t => t.dueDate && t.dueDate >= startOfWeek && t.dueDate <= endOfWeek);
            case 'month':
                const startOfMonth = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
                const endOfMonth = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0];
                return tasksToFilter.filter(t => t.dueDate && t.dueDate >= startOfMonth && t.dueDate <= endOfMonth);
            case 'year':
                const startOfYear = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];
                const endOfYear = new Date(now.getFullYear(), 11, 31).toISOString().split('T')[0];
                return tasksToFilter.filter(t => t.dueDate && t.dueDate >= startOfYear && t.dueDate <= endOfYear);
            case 'custom':
                if (!currentCustomFilter) return tasksToFilter;
                return tasksToFilter.filter(t => 
                    t.dueDate && 
                    t.dueDate >= currentCustomFilter.start && 
                    t.dueDate <= currentCustomFilter.end
                );
            case 'all':
            default:
                return [...tasksToFilter];
        }
    }




    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleCalendarMouseDown
function handleCalendarMouseDown(e) {
    const day = e.target.closest('.calendar-day');
    if (!day || !day.dataset.date) return;
    
    isSelectingDates = true;
    selectionStartDate = day.dataset.date;
    selectionEndDate = day.dataset.date;
    
    clearCalendarSelection();
    updateCalendarSelection();
}

    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleCalendarMouseOver
function handleCalendarMouseOver(e) {
    if (!isSelectingDates) return;
    
    const day = e.target.closest('.calendar-day');
    if (!day || !day.dataset.date) return;
    
    selectionEndDate = day.dataset.date;
    updateCalendarSelection();
}

    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é handleCalendarMouseUp
function handleCalendarMouseUp() {
    if (!isSelectingDates) return;
    isSelectingDates = false;
    
    const startDate = parseDateSafe(selectionStartDate);
    const endDate = parseDateSafe(selectionEndDate);
    
    if (!startDate || !endDate) return;
    
    const [start, end] = [startDate, endDate].sort((a, b) => a - b);
    const startStr = start.toISOString().split('T')[0];
    const endStr = end.toISOString().split('T')[0];
    
    currentCustomFilter = { start: startStr, end: endStr };
    currentTaskFilter = 'custom';
    taskFilterSelect.value = 'custom';
    
    renderTasks();
    highlightCalendarFilterRange();
}

    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é clearCalendarSelection
function clearCalendarSelection() {
    const days = document.querySelectorAll('#mainCalendar .calendar-day');
    days.forEach(day => {
        day.classList.remove('range-selected', 'range-start', 'range-end', 'range-middle', 'range-single');
    });
}


    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é updateCalendarSelection
function updateCalendarSelection() {
    const start = parseDateSafe(selectionStartDate);
    const end = parseDateSafe(selectionEndDate);
    if (!start || !end) return;

    const [minDate, maxDate] = [start, end].sort((a, b) => a - b);
    const minStr = minDate.toISOString().split('T')[0];
    const maxStr = maxDate.toISOString().split('T')[0];

    document.querySelectorAll('#mainCalendar .calendar-day').forEach(day => {
        const date = day.dataset.date;
        if (!date) return;

        if (date >= minStr && date <= maxStr) {
            day.classList.add('range-selected');
            if (date === minStr) day.classList.add('range-start');
            if (date === maxStr) day.classList.add('range-end');
        } else {
            day.classList.remove('range-selected', 'range-start', 'range-end');
        }
    });
}

    // –û–±–Ω–æ–≤–∏—Ç–µ —Ñ—É–Ω–∫—Ü–∏—é resetSelection
function resetSelection() {
    currentCustomFilter = null;
    currentTaskFilter = 'all';
    taskFilterSelect.value = 'all';
    selectionStartDate = null;
    selectionEndDate = null;
    clearCalendarSelection();
    renderTasks();
}
// --- –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–¥—Å–≤–µ—Ç–∫–∏ –∫–∞–ª–µ–Ω–¥–∞—Ä—è ---
function highlightCalendarFilterRange() {
    if (!mainCalendar) return;
    const days = mainCalendar.querySelectorAll('.calendar-day[data-date]');
    days.forEach(day => day.classList.remove('range-start', 'range-end', 'range-middle', 'range-single'));

    let startDateStr = null;
    let endDateStr = null;

    if (currentTaskFilter === 'custom' && currentCustomFilter) {
        startDateStr = currentCustomFilter.start;
        endDateStr = currentCustomFilter.end;
    } else {
        const now = new Date();
        switch (currentTaskFilter) {
            case 'today':
                startDateStr = endDateStr = now.toISOString().split('T')[0];
                break;
            case 'week':
                startDateStr = getStartOfWeek(now).toISOString().split('T')[0];
                endDateStr = getEndOfWeek(now).toISOString().split('T')[0];
                break;
                case 'month':
                    startDateStr = new Date(now.getFullYear(), now.getMonth(), 1).toISOString().split('T')[0];
                    endDateStr = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0];
                    break;
                case 'year':
                    startDateStr = new Date(now.getFullYear(), 0, 1).toISOString().split('T')[0];
                    endDateStr = new Date(now.getFullYear(), 11, 31).toISOString().split('T')[0];
                    break;
            }
        }

        if (startDateStr && endDateStr && startDateStr <= endDateStr) {
            days.forEach(day => {
                const date = day.dataset.date;
                if (date >= startDateStr && date <= endDateStr) {
                    if (date === startDateStr && date === endDateStr) {
                        day.classList.add('range-single');
                    } else if (date === startDateStr) {
                        day.classList.add('range-start');
                    } else if (date === endDateStr) {
                        day.classList.add('range-end');
                    } else {
                        day.classList.add('range-middle');
                    }
                }
            });
        }
    }





    // --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –¥–∞—Ç ---
    function parseDateSafe(dateString) {
        if (!dateString) return null;
        let date = new Date(dateString); // –ü—Ä–æ–±—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞—Ä—Å–∏–Ω–≥
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–Ω–æ–π –¥–∞—Ç–æ–π
        if (!isNaN(date.getTime())) {
            return date;
        }
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥–ª—è —Ñ–æ—Ä–º–∞—Ç–∞ YYYY-MM-DD (–±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        const parts = dateString.split('T')[0].split('-');
        if (parts.length === 3) {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º UTC –¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å —á–∞—Å–æ–≤—ã–º–∏ –ø–æ—è—Å–∞–º–∏ –ø—Ä–∏ –ø–∞—Ä—Å–∏–Ω–≥–µ —Ç–æ–ª—å–∫–æ –¥–∞—Ç—ã
            date = new Date(Date.UTC(parseInt(parts[0], 10), parseInt(parts[1], 10) - 1, parseInt(parts[2], 10)));
            if (!isNaN(date.getTime())) {
                return date;
            }
        }
        console.warn("Could not parse date:", dateString);
        return null; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º null, –µ—Å–ª–∏ –ø–∞—Ä—Å–∏–Ω–≥ –Ω–µ —É–¥–∞–ª—Å—è
    }

    // –ü–æ–ª—É—á–∏—Ç—å –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è date
    function getStartOfWeek(date) {
        const d = new Date(date);
        const day = d.getDay(); // 0=–í—Å, 1=–ü–Ω, ..., 6=–°–±
        const diff = d.getDate() - day + (day === 0 ? -6 : 1); // –ö–æ—Ä—Ä–µ–∫—Ü–∏—è –¥–ª—è –Ω–µ–¥–µ–ª–∏ —Å –ü–Ω
        return new Date(d.setDate(diff));
    }

    // –ü–æ–ª—É—á–∏—Ç—å –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ —Ç–µ–∫—É—â–µ–π –Ω–µ–¥–µ–ª–∏ –¥–ª—è date
    function getEndOfWeek(date) {
        const start = getStartOfWeek(date); // –ü–æ–ª—É—á–∞–µ–º –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫
        return new Date(start.setDate(start.getDate() + 6)); // –î–æ–±–∞–≤–ª—è–µ–º 6 –¥–Ω–µ–π
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É (–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –≤—Ä–µ–º—è) –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è
    function formatDate(dateInput, includeTime = false) {
        if (!dateInput) return '';
        // –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –≤ –æ–±—ä–µ–∫—Ç Date, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        const date = (typeof dateInput === 'string') ? parseDateSafe(dateInput) : dateInput;
        if (!date || isNaN(date.getTime())) return 'Invalid Date';

        const optsDate = { year: 'numeric', month: 'short', day: 'numeric' }; // –§–æ—Ä–º–∞—Ç: 10 –∞–ø—Ä 2025
        const optsTime = { hour: '2-digit', minute: '2-digit' }; // –§–æ—Ä–º–∞—Ç: 05:00

        let formattedString = date.toLocaleDateString('ru-RU', optsDate);

        // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏ –≤—Ä–µ–º—è –Ω–µ 00:00 (–∏–ª–∏ –µ—Å–ª–∏ –¥–∞—Ç–∞ –Ω–µ –ø–∞—Ä—Å–∏–ª–∞—Å—å –∏–∑ —Å—Ç—Ä–æ–∫–∏ –±–µ–∑ –≤—Ä–µ–º–µ–Ω–∏)
        if (includeTime) {
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π –∏–Ω–ø—É—Ç –∏–ª–∏ –æ–±—ä–µ–∫—Ç Date –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –≤—Ä–µ–º–µ–Ω–∏
            let hasTimeComponent = false;
            if (typeof dateInput === 'string' && dateInput.includes('T')) {
                hasTimeComponent = true; // –ï—Å–ª–∏ —Å—Ç—Ä–æ–∫–∞ —Å–æ–¥–µ—Ä–∂–∞–ª–∞ –≤—Ä–µ–º—è
            } else if (date instanceof Date && (date.getHours() !== 0 || date.getMinutes() !== 0 || date.getSeconds() !== 0)) {
                 hasTimeComponent = true; // –ï—Å–ª–∏ –æ–±—ä–µ–∫—Ç Date –∏–º–µ–µ—Ç –≤—Ä–µ–º—è
            }

            if (hasTimeComponent) {
                formattedString += ` ${date.toLocaleTimeString('ru-RU', optsTime)}`;
            }
        }
        return formattedString;
    }

    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –¥–ª—è –±—ç–¥–∂–µ–π –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    function formatDateTimeForDisplay(dateStr, timeStr) {
        if (!dateStr) return '';
        let display = formatDate(dateStr); // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –¥–∞—Ç—É
        if (timeStr) {
            display += ` ${timeStr}`; // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
        }
        return display;
    }
    // --- –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥–∞–ª—å–Ω—ã–º–∏ –æ–∫–Ω–∞–º–∏ –¥–∞—Ç/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π ---
    function openDatePickerModal() {
        // –ù–µ –æ—Ç–∫—Ä—ã–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞ –∏ –Ω–µ –∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
        if (!taskInput.value.trim() && !currentEditingTaskId) return;

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–Ω–∞—á–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        tempSelectedDate = currentSelectedDate;
        tempSelectedTime = currentSelectedTime;
        taskTimeInput.value = currentSelectedTime || ''; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—Ä–µ–º—è –≤ –ø–æ–ª–µ

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¥–∞—Ç—É –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è –º–æ–¥–∞–ª–∫–∏ (—Ç–µ–∫—É—â—É—é –≤—ã–±—Ä–∞–Ω–Ω—É—é –∏–ª–∏ —Å–µ–≥–æ–¥–Ω—è)
        datePickerCalendarDate = tempSelectedDate ? parseDateSafe(tempSelectedDate) || new Date() : new Date();

        renderCalendar(datePickerCalendar, datePickerCalendarDate.getFullYear(), datePickerCalendarDate.getMonth(), true, 'date');
        highlightCalendarSelection(datePickerCalendar, tempSelectedDate); // –í—ã–¥–µ–ª—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å
        datePickerModal.style.zIndex = '1050'; // –ü–æ–≤–µ—Ä—Ö –¥—Ä—É–≥–∏—Ö –º–æ–¥–∞–ª–æ–∫
        datePickerModal.classList.remove('hidden');
    }
    function openReminderPickerModal() {
        if (!taskInput.value.trim() && !currentEditingTaskId) return;

        tempSelectedReminderDate = currentSelectedReminderDate;
        tempSelectedReminderTime = currentSelectedReminderTime;
        tempSelectedReminderFrequency = currentSelectedReminderFrequency || 'once'; // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Å—Ç–æ—Ç—É

        reminderTimeInput.value = tempSelectedReminderTime || '';
        if (reminderFrequencySelect) reminderFrequencySelect.value = tempSelectedReminderFrequency; // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —á–∞—Å—Ç–æ—Ç—É

        reminderDatePickerCalendarDate = tempSelectedReminderDate ? parseDateSafe(tempSelectedReminderDate) || new Date() : new Date();
        renderCalendar(reminderDatePickerCalendar, reminderDatePickerCalendarDate.getFullYear(), reminderDatePickerCalendarDate.getMonth(), true, 'reminder');
        highlightCalendarSelection(reminderDatePickerCalendar, tempSelectedReminderDate);
        reminderDatePickerModal.style.zIndex = '1050';
        reminderDatePickerModal.classList.remove('hidden');
    }

    function closeDatePickerModal() {
        datePickerModal.style.zIndex = ''; // –°–±—Ä–∞—Å—ã–≤–∞–µ–º z-index
        datePickerModal.classList.add('hidden');
        resetTempDates(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ
    }

    function closeReminderPickerModal() {
        reminderDatePickerModal.style.zIndex = '';
        reminderDatePickerModal.classList.add('hidden');
        resetTempDates();
    }
    function closeTaskDetailsModal() {
        taskDetailsModal.classList.add('hidden');
        taskDetailsModal.innerHTML = ''; // –û—á–∏—â–∞–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –º–æ–¥–∞–ª–∫–∏ –¥–µ—Ç–∞–ª–µ–π
        // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Ç–µ–∫—É—â–∏–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è
        currentEditingTaskId = null;
        isEditingCompletedTask = false;
        resetCurrentDateSelection();
        handleInputChange.call(taskInput); // –û–±–Ω–æ–≤–ª—è–µ–º –∏–∫–æ–Ω–∫–∏/–±—ç–¥–∂–∏ —É –ø–æ–ª—è –≤–≤–æ–¥–∞
    }
    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –°—Ä–æ–∫ –í—ã–ø–æ–ª–Ω–µ–Ω–∏—è
    function saveTaskDate() {
        currentSelectedDate = tempSelectedDate; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—É—é –¥–∞—Ç—É
        currentSelectedTime = taskTimeInput.value || null; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—Ä–µ–º—è (–∏–ª–∏ null)

        // –ï—Å–ª–∏ –∏–¥–µ—Ç —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É –¥–µ—Ç–∞–ª–µ–π, –æ–±–Ω–æ–≤–∏—Ç—å –∑–∞–¥–∞—á—É
        if (currentEditingTaskId) {
            editTask(currentEditingTaskId, {
                dueDate: currentSelectedDate,
                dueTime: currentSelectedTime
            }, isEditingCompletedTask);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ —Å–∞–º–æ–π –º–æ–¥–∞–ª–∫–µ –¥–µ—Ç–∞–ª–µ–π
            const ddi = taskDetailsModal.querySelector('#editDueDate');
            const dti = taskDetailsModal.querySelector('#editDueTime');
            if (ddi) ddi.value = currentSelectedDate || '';
            if (dti) dti.value = currentSelectedTime || '';
        }
        closeDatePickerModal();
        updateSelectedDateDisplaysContent(); // –û–±–Ω–æ–≤–ª—è–µ–º –±—ç–¥–∂–∏ –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        updateSelectedDateDisplaysVisibility(taskInput.value.trim().length > 0 || !!currentEditingTaskId);
    }

    // –°–æ—Ö—Ä–∞–Ω–∏—Ç—å –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ
    function saveReminderDate() {
        // –¢—Ä–µ–±—É–µ–º –≤—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è
        if (!tempSelectedReminderDate || !reminderTimeInput.value) {
            alert("–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –∏ –í–†–ï–ú–Ø –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.");
            return;
        }
        // –ü–æ–ª—É—á–∞–µ–º —á–∞—Å—Ç–æ—Ç—É –∏–∑ select
        const selectedFrequency = reminderFrequencySelect ? reminderFrequencySelect.value : 'once';

        // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
        currentSelectedReminderDate = tempSelectedReminderDate;
        currentSelectedReminderTime = reminderTimeInput.value;
        currentSelectedReminderFrequency = selectedFrequency;

        // –ï—Å–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —á–µ—Ä–µ–∑ –º–æ–¥–∞–ª–∫—É –¥–µ—Ç–∞–ª–µ–π
        if (currentEditingTaskId) {
            editTask(currentEditingTaskId, {
                reminderDate: currentSelectedReminderDate,
                reminderTime: currentSelectedReminderTime,
                reminderFrequency: currentSelectedReminderFrequency // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏ —á–∞—Å—Ç–æ—Ç—É
            }, isEditingCompletedTask);
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–ª—è –≤ –º–æ–¥–∞–ª–∫–µ –¥–µ—Ç–∞–ª–µ–π
            const rdi = taskDetailsModal.querySelector('#editReminderDate');
            const rti = taskDetailsModal.querySelector('#editReminderTime');
            const rfi = taskDetailsModal.querySelector('#editReminderFrequency');
            if (rdi) rdi.value = currentSelectedReminderDate || '';
            if (rti) {
               rti.value = currentSelectedReminderTime || '';
               rti.disabled = !currentSelectedReminderDate; // –í—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ —Ç–æ–ª—å–∫–æ —Å –¥–∞—Ç–æ–π
            }
            if (rfi) rfi.value = currentSelectedReminderFrequency;
        }
        closeReminderPickerModal();
        updateSelectedDateDisplaysContent();
        updateSelectedDateDisplaysVisibility(taskInput.value.trim().length > 0 || !!currentEditingTaskId);
    }

    // –°–±—Ä–æ—Å —Ç–µ–∫—É—â–µ–≥–æ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏/—á–∞—Å—Ç–æ—Ç—ã –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    function resetCurrentDateSelection() {
        currentSelectedDate = null; currentSelectedTime = null;
        currentSelectedReminderDate = null; currentSelectedReminderTime = null;
        currentSelectedReminderFrequency = 'once';
        resetTempDates(); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ
        // –û—á–∏—â–∞–µ–º –ø–æ–ª—è –≤ –º–æ–¥–∞–ª–∫–∞—Ö (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
        if(taskTimeInput) taskTimeInput.value = '';
        if(reminderTimeInput) reminderTimeInput.value = '';
        if(reminderFrequencySelect) reminderFrequencySelect.value = 'once';
        updateSelectedDateDisplaysContent(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –±—ç–¥–∂–µ–π
    }

    // –°–±—Ä–æ—Å –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ –≤—ã–±–æ—Ä–∞ (–ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –º–æ–¥–∞–ª–æ–∫ –±–µ–∑ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è)
    function resetTempDates() {
        tempSelectedDate = null; tempSelectedTime = null;
        tempSelectedReminderDate = null; tempSelectedReminderTime = null;
        tempSelectedReminderFrequency = 'once';
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ –±—ç–¥–∂–µ–π –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    function updateSelectedDateDisplaysContent() {
        if(selectedDateDisplay) selectedDateDisplay.textContent = formatDateTimeForDisplay(currentSelectedDate, currentSelectedTime);
        if(selectedReminderDisplay) selectedReminderDisplay.textContent = formatDateTimeForDisplay(currentSelectedReminderDate, currentSelectedReminderTime);
    }

    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤–∏–¥–∏–º–æ—Å—Ç–∏ –±—ç–¥–∂–µ–π –ø–æ–¥ –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
    function updateSelectedDateDisplaysVisibility(show) {
        if(selectedDateDisplay) selectedDateDisplay.classList.toggle('visible', show && !!currentSelectedDate);
        if(selectedReminderDisplay) selectedReminderDisplay.classList.toggle('visible', show && !!currentSelectedReminderDate);
    }

    // --- –õ–æ–≥–∏–∫–∞ –ö–∞–ª–µ–Ω–¥–∞—Ä—è ---
    function renderCalendar(container, year, month, isModal, type) {
        if (!container) { console.error("Calendar container not found:", container); return; }
        container.innerHTML = ''; // –û—á–∏—â–∞–µ–º –ø–µ—Ä–µ–¥ —Ä–µ–Ω–¥–µ—Ä–æ–º
        const date = new Date(year, month);
        const monthName = date.toLocaleString('ru-RU', { month: 'long' });
        const currentYear = date.getFullYear();

        // –®–∞–ø–∫–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è (–ù–∞–∑–≤–∞–Ω–∏–µ –º–µ—Å—è—Ü–∞, –∫–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏)
        const header = document.createElement('div');
        header.className = 'calendar-header';
        header.innerHTML = `
            <button class="calendar-nav-btn prev-month" data-calendar-type="${type}" title="–ü—Ä–µ–¥—ã–¥—É—â–∏–π –º–µ—Å—è—Ü">&lt;</button>
            <span class="calendar-title">${monthName} ${currentYear}</span>
            <button class="calendar-nav-btn next-month" data-calendar-type="${type}" title="–°–ª–µ–¥—É—é—â–∏–π –º–µ—Å—è—Ü">&gt;</button>
        `;
        container.appendChild(header);

        // –¢–∞–±–ª–∏—Ü–∞ –∫–∞–ª–µ–Ω–¥–∞—Ä—è
        const table = document.createElement('table');
        table.className = 'calendar';
        const thead = table.createTHead();
        const headRow = thead.insertRow();
        ['–ü–Ω', '–í—Ç', '–°—Ä', '–ß—Ç', '–ü—Ç', '–°–±', '–í—Å'].forEach(day => {
            const th = document.createElement('th');
            th.textContent = day;
            headRow.appendChild(th);
        });

        const tbody = table.createTBody();
        const firstDayOfMonth = new Date(year, month, 1);
        let startingDayOfWeek = firstDayOfMonth.getDay(); // 0=–í—Å, 1=–ü–Ω...
        startingDayOfWeek = startingDayOfWeek === 0 ? 6 : startingDayOfWeek - 1; // –î–µ–ª–∞–µ–º –ü–Ω=0, –í—Å=6
        const daysInMonth = new Date(year, month + 1, 0).getDate(); // –ö–æ–ª-–≤–æ –¥–Ω–µ–π –≤ –º–µ—Å—è—Ü–µ
        const todayStr = new Date().toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ YYYY-MM-DD

        let currentDay = 1; // –°—á–µ—Ç—á–∏–∫ –¥–Ω–µ–π –º–µ—Å—è—Ü–∞
        // –¶–∏–∫–ª –ø–æ —Å—Ç—Ä–æ–∫–∞–º (–º–∞–∫—Å 6 –Ω–µ–¥–µ–ª—å)
        for (let i = 0; i < 6; i++) {
            const row = tbody.insertRow();
            // –¶–∏–∫–ª –ø–æ –¥–Ω—è–º –Ω–µ–¥–µ–ª–∏ (0=–ü–Ω .. 6=–í—Å)
            for (let j = 0; j < 7; j++) {
                const cell = row.insertCell();
                // –ï—Å–ª–∏ —ç—Ç–æ –ø—É—Å—Ç–∞—è —è—á–µ–π–∫–∞ –¥–æ –Ω–∞—á–∞–ª–∞ –º–µ—Å—è—Ü–∞ –∏–ª–∏ –ø–æ—Å–ª–µ –∫–æ–Ω—Ü–∞
                if ((i === 0 && j < startingDayOfWeek) || currentDay > daysInMonth) {
                    cell.classList.add('empty');
                } else {
                    // –°–æ–∑–¥–∞–µ–º —ç–ª–µ–º–µ–Ω—Ç –¥–Ω—è
                    const daySpan = document.createElement('span');
                    daySpan.className = 'calendar-day';
                    daySpan.textContent = currentDay;
                    const currentDateStr = `${year}-${String(month + 1).padStart(2, '0')}-${String(currentDay).padStart(2, '0')}`;
                    daySpan.dataset.date = currentDateStr; // –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞—Ç—É –≤ –∞—Ç—Ä–∏–±—É—Ç

                    // –î–æ–±–∞–≤–ª—è–µ–º –∫–ª–∞—Å—Å—ã –¥–ª—è —Å—Ç–∏–ª–∏–∑–∞—Ü–∏–∏
                    if (currentDateStr === todayStr) daySpan.classList.add('today');
                    if (isModal) { // –ï—Å–ª–∏ —ç—Ç–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—å –≤ –º–æ–¥–∞–ª–∫–µ
                        if (type === 'date' && currentDateStr === tempSelectedDate) daySpan.classList.add('selected');
                        if (type === 'reminder' && currentDateStr === tempSelectedReminderDate) daySpan.classList.add('selected');
                    }
                    // –¢–æ—á–∫–∞ –ø–æ–¥ –¥–∞—Ç–æ–π –≤ –ì–õ–ê–í–ù–û–ú –∫–∞–ª–µ–Ω–¥–∞—Ä–µ, –µ—Å–ª–∏ –µ—Å—Ç—å –∑–∞–¥–∞—á–∏
                    if (!isModal && hasActiveTasksOnDate(currentDateStr)) {
                        daySpan.classList.add('has-tasks');
                    }

                    cell.appendChild(daySpan);
                    currentDay++;
                }
            }
            // –ï—Å–ª–∏ –¥–Ω–∏ –º–µ—Å—è—Ü–∞ –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å, –ø—Ä–µ–∫—Ä–∞—â–∞–µ–º –¥–æ–±–∞–≤–ª—è—Ç—å —Å—Ç—Ä–æ–∫–∏
            if (currentDay > daysInMonth) break;
        }
        container.appendChild(table);
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞—á–∏ –Ω–∞ —É–∫–∞–∑–∞–Ω–Ω—É—é –¥–∞—Ç—É
    function hasActiveTasksOnDate(dateStr) {
        return tasks.some(task => task.dueDate === dateStr);
    }

    // –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–æ—á–∫–∏ 'has-tasks' –≤ –≥–ª–∞–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    function updateCalendarHighlights() {
        if (!mainCalendar) return;
        const days = mainCalendar.querySelectorAll('.calendar-day');
        days.forEach(day => {
            const dateStr = day.dataset.date;
            if(dateStr) { // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —É —ç–ª–µ–º–µ–Ω—Ç–∞ –µ—Å—Ç—å –¥–∞—Ç–∞
                day.classList.toggle('has-tasks', hasActiveTasksOnDate(dateStr));
            }
        });
    }

    // –í—ã–¥–µ–ª—è–µ—Ç –æ–¥–∏–Ω –¥–µ–Ω—å –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    function highlightCalendarSelection(container, dateStr) {
        if (!container) return;
        const days = container.querySelectorAll('.calendar-day');
        days.forEach(day => {
            day.classList.remove('selected'); // –°–Ω–∏–º–∞–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Å–æ –≤—Å–µ—Ö
            if (day.dataset.date === dateStr) {
                day.classList.add('selected'); // –í—ã–¥–µ–ª—è–µ–º –Ω—É–∂–Ω—ã–π
            }
        });
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –ø–æ –∫–∞–ª–µ–Ω–¥–∞—Ä—è–º (—Å—Ç—Ä–µ–ª–∫–∏ < >)
    function handleCalendarNav(e) {
        const navButton = e.target.closest('.calendar-nav-btn');
        if (!navButton) return; // –ö–ª–∏–∫ –Ω–µ –ø–æ –∫–Ω–æ–ø–∫–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏

        const type = navButton.dataset.calendarType; // –¢–∏–ø –∫–∞–ª–µ–Ω–¥–∞—Ä—è (main, date, reminder)
        if (!type) return;

        let calendarDate, renderTarget, isModal = true;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –∫–∞–∫–æ–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å –∏ –¥–∞—Ç—É –æ–±–Ω–æ–≤–ª—è—Ç—å
        switch(type) {
            case 'main':
                calendarDate = mainCalendarDate;
                renderTarget = mainCalendar;
                isModal = false; // –≠—Ç–æ –Ω–µ –º–æ–¥–∞–ª—å–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
                break;
            case 'date':
                calendarDate = datePickerCalendarDate;
                renderTarget = datePickerCalendar;
                break;
            case 'reminder':
                calendarDate = reminderPickerCalendarDate;
                renderTarget = reminderDatePickerCalendar;
                break;
            default: return; // –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø
        }

        // –ú–µ–Ω—è–µ–º –º–µ—Å—è—Ü
        if (navButton.classList.contains('prev-month')) {
            calendarDate.setMonth(calendarDate.getMonth() - 1);
        } else if (navButton.classList.contains('next-month')) {
            calendarDate.setMonth(calendarDate.getMonth() + 1);
        } else {
            return; // –ö–ª–∏–∫ –Ω–µ –ø–æ —Å—Ç—Ä–µ–ª–∫–µ
        }

        // –ü–µ—Ä–µ—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –Ω—É–∂–Ω—ã–π –∫–∞–ª–µ–Ω–¥–∞—Ä—å
        renderCalendar(renderTarget, calendarDate.getFullYear(), calendarDate.getMonth(), isModal, type);

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥—Å–≤–µ—Ç–∫—É –ø–æ—Å–ª–µ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞
        if (isModal) {
            // –í –º–æ–¥–∞–ª–∫–∞—Ö –≤—ã–¥–µ–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –¥–∞—Ç—É
            if (type === 'date') highlightCalendarSelection(renderTarget, tempSelectedDate);
            if (type === 'reminder') highlightCalendarSelection(renderTarget, tempSelectedReminderDate);
        } else { // –í –≥–ª–∞–≤–Ω–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
            updateCalendarHighlights(); // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ—á–∫–∏ –∑–∞–¥–∞—á
            highlightCalendarFilterRange(); // –û–±–Ω–æ–≤–ª—è–µ–º –≤—ã–¥–µ–ª–µ–Ω–∏–µ —Ñ–∏–ª—å—Ç—Ä–∞
        }
    }

    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –ø–æ –¥–Ω—é –≤ –ú–û–î–ê–õ–¨–ù–´–• –∫–∞–ª–µ–Ω–¥–∞—Ä—è—Ö
    function handleModalDayClick(e) {
        const dayElement = e.target.closest('.calendar-day');
        // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–ª–∏–∫–∏ –Ω–µ –ø–æ –¥–Ω—è–º –∏–ª–∏ –ø–æ –ø—É—Å—Ç—ã–º —è—á–µ–π–∫–∞–º
        if (!dayElement || !dayElement.dataset.date) return;

        const selectedDateStr = dayElement.dataset.date;
        const calendarContainer = e.currentTarget; // –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∫–∞–ª–µ–Ω–¥–∞—Ä—è (datePickerCalendar –∏–ª–∏ reminderDatePickerCalendar)

        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–æ–≥–æ, –≤ –∫–∞–∫–æ–º –∫–∞–ª–µ–Ω–¥–∞—Ä–µ –∫–ª–∏–∫–Ω—É–ª–∏
        if (calendarContainer.id === 'datePickerCalendar') {
            tempSelectedDate = selectedDateStr;
            highlightCalendarSelection(calendarContainer, tempSelectedDate); // –í—ã–¥–µ–ª—è–µ–º –∫–ª–∏–∫–Ω—É—Ç—ã–π –¥–µ–Ω—å
        } else if (calendarContainer.id === 'reminderDatePickerCalendar') {
            tempSelectedReminderDate = selectedDateStr;
            highlightCalendarSelection(calendarContainer, tempSelectedReminderDate);
        }
    }

function highlightCalendarFilterRange() {
    if (!mainCalendar) return;
    const days = mainCalendar.querySelectorAll('.calendar-day[data-date]');

    // 1. –°–Ω–∞—á–∞–ª–∞ —É–±–∏—Ä–∞–µ–º –í–°–ï –∫–ª–∞—Å—Å—ã –¥–∏–∞–ø–∞–∑–æ–Ω–∞ —Å–æ –≤—Å–µ—Ö –¥–Ω–µ–π
    const rangeClasses = ['range-start', 'range-end', 'range-middle', 'range-single'];
    days.forEach(day => day.classList.remove(...rangeClasses));

    // 2. –û–ø—Ä–µ–¥–µ–ª—è–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω –¥–∞—Ç –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è
    let startDateStr = null;
    let endDateStr = null;
    const now = new Date();
    const todayStr = now.toISOString().split('T')[0]; // –°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞ 'YYYY-MM-DD'

    switch (currentTaskFilter) {
        case 'today':
            // –§–∏–ª—å—Ç—Ä '–ù–∞ —Å–µ–≥–æ–¥–Ω—è': –≤—ã–¥–µ–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Å–µ–≥–æ–¥–Ω—è—à–Ω–∏–π –¥–µ–Ω—å
            startDateStr = endDateStr = todayStr;
            break;
    
        case 'month':
            // –§–∏–ª—å—Ç—Ä '–ù–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü': –ù–ê–ß–ò–ù–ê–ï–ú –° –°–ï–ì–û–î–ù–Ø
            startDateStr = todayStr; // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –º–µ—Å—è—Ü–∞
            endDateStr = new Date(now.getFullYear(), now.getMonth() + 1, 0).toISOString().split('T')[0];
            break;
        case 'week':
                // startDateStr = getStartOfWeek(now).toISOString().split('T')[0]; // –°—Ç–∞—Ä–∞—è —Å—Ç—Ä–æ–∫–∞
                startDateStr = todayStr; // –ù–æ–≤–∞—è —Å—Ç—Ä–æ–∫–∞: –ù–ê–ß–ò–ù–ê–ï–ú –° –°–ï–ì–û–î–ù–Ø
                endDateStr = getEndOfWeek(now).toISOString().split('T')[0]; // –ö–æ–Ω–µ—Ü –Ω–µ–¥–µ–ª–∏ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—Ä–µ–∂–Ω–∏–º
                break;
        case 'year':
            // –§–∏–ª—å—Ç—Ä '–ù–∞ —ç—Ç–æ—Ç –≥–æ–¥': –ù–ê–ß–ò–ù–ê–ï–ú –° –°–ï–ì–û–î–ù–Ø
            startDateStr = todayStr; // <-- –ò–ó–ú–ï–ù–ï–ù–ò–ï –ó–î–ï–°–¨
            // –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º –¥–Ω–µ–º —Ç–µ–∫—É—â–µ–≥–æ –≥–æ–¥–∞
            endDateStr = new Date(now.getFullYear(), 11, 31).toISOString().split('T')[0];
            break;
         case 'all':
         default:
            // –î–ª—è 'all' –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–¥–µ–ª—è–µ–º
            return;
    }

    // 3. –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –∫ —ç–ª–µ–º–µ–Ω—Ç–∞–º –¥–Ω–µ–π (.calendar-day), –ø–æ–ø–∞–¥–∞—é—â–∏–º –≤ –¥–∏–∞–ø–∞–∑–æ–Ω
    // –î–æ–±–∞–≤–∏–º –ø—Ä–æ–≤–µ—Ä–∫—É, —á—Ç–æ –Ω–∞—á–∞–ª—å–Ω–∞—è –¥–∞—Ç–∞ –Ω–µ –ø–æ–∑–∂–µ –∫–æ–Ω–µ—á–Ω–æ–π (–Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π)
    if (startDateStr && endDateStr && startDateStr <= endDateStr) {
         days.forEach(day => {
             const dayDateStr = day.dataset.date;
             // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –¥–∞—Ç–∞ –¥–Ω—è —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
             if (dayDateStr && dayDateStr >= startDateStr && dayDateStr <= endDateStr) {
                 // –ü—Ä–∏–º–µ–Ω—è–µ–º –∫–ª–∞—Å—Å—ã –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –ø–æ–ª–æ–∂–µ–Ω–∏—è –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                 if (dayDateStr === startDateStr && dayDateStr === endDateStr) {
                     // –ï–¥–∏–Ω—Å—Ç–≤–µ–Ω–Ω—ã–π –¥–µ–Ω—å –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
                     day.classList.add('range-single');
                 } else if (dayDateStr === startDateStr) {
                     // –ù–∞—á–∞–ª–æ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                     day.classList.add('range-start');
                 } else if (dayDateStr === endDateStr) {
                     // –ö–æ–Ω–µ—Ü –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                     day.classList.add('range-end');
                 } else {
                     // –°–µ—Ä–µ–¥–∏–Ω–∞ –¥–∏–∞–ø–∞–∑–æ–Ω–∞
                     day.classList.add('range-middle');
                 }
             }
         });
     }
}
    // --- –ú–æ–¥–∞–ª—å–Ω–æ–µ –û–∫–Ω–æ –î–µ—Ç–∞–ª–µ–π –ó–∞–¥–∞—á–∏ ---
    function openTaskDetails(taskId, isCompleted) {
        const list = isCompleted ? completedTasks : tasks;
        const task = list.find(t => t.id === taskId);
        if (!task) {
            console.error("Task not found for details:", taskId, "in", isCompleted ? "completed" : "active");
            return;
        }
        console.log("Opening details for:", task);
        currentEditingTaskId = taskId;
        isEditingCompletedTask = isCompleted;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ –¥–∞—Ç—ã/–≤—Ä–µ–º—è/—á–∞—Å—Ç–æ—Ç—É –∏–∑ –∑–∞–¥–∞—á–∏
        currentSelectedDate = task.dueDate || null;
        currentSelectedTime = task.dueTime || null;
        currentSelectedReminderDate = task.reminderDate || null;
        currentSelectedReminderTime = task.reminderTime || null;
        currentSelectedReminderFrequency = task.reminderFrequency || 'once';

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º HTML –¥–ª—è –º–æ–¥–∞–ª–∫–∏
        taskDetailsModal.innerHTML = `
        <div class="modal-content">
            <h2>–î–µ—Ç–∞–ª–∏ –ó–∞–¥–∞—á–∏ ${isCompleted ? '(–ó–∞–≤–µ—Ä—à–µ–Ω–æ)' : ''}</h2>

            <div class="task-detail-row">
                <label for="editTaskText">–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏:</label>
                <textarea id="editTaskText" class="task-detail-textarea" ${isCompleted ? 'readonly' : ''}>${escapeHtml(task.text)}</textarea>
            </div>

            <div class="task-detail-row">
                <label>–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:</label>
                <input type="date" id="editDueDate" class="task-detail-input" value="${task.dueDate || ''}" ${isCompleted ? 'disabled' : ''}>
                <input type="time" id="editDueTime" class="task-detail-input" value="${task.dueTime || ''}" ${isCompleted ? 'disabled' : ''}>
                ${!isCompleted ? '<button id="editDueDateBtn" class="icon-btn" title="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è">üìÖ</button>' : ''}
            </div>

            <div class="task-detail-row">
                <label>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ:</label>
                <input type="date" id="editReminderDate" class="task-detail-input" value="${task.reminderDate || ''}" ${isCompleted ? 'disabled' : ''}>
                <input type="time" id="editReminderTime" class="task-detail-input" value="${task.reminderTime || ''}" ${isCompleted || !task.reminderDate ? 'disabled' : ''}>
                <label for="editReminderFrequency" style="display: block; margin-top: 8px; font-size: 12px; color: var(--secondary-text-color);">–ß–∞—Å—Ç–æ—Ç–∞:</label>
                <select id="editReminderFrequency" class="task-detail-input" style="width:auto; display: inline-block; margin-right: 8px;" ${isCompleted ? 'disabled' : ''}>
                    <option value="once">–û–¥–∏–Ω —Ä–∞–∑</option>
                    <option value="daily">–ï–∂–µ–¥–Ω–µ–≤–Ω–æ</option>
                    <option value="weekly">–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ</option>
                    <option value="monthly">–ï–∂–µ–º–µ—Å—è—á–Ω–æ</option>
                    <option value="yearly">–ï–∂–µ–≥–æ–¥–Ω–æ</option>
                </select>
                 ${!isCompleted ? '<button id="editReminderDateBtn" class="icon-btn" title="–í—ã–±—Ä–∞—Ç—å –¥–∞—Ç—É/–≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" style="top: auto; bottom: 5px;">üîî</button>' : ''}
            </div>

            <div class="task-detail-row">
                <label for="editTaskNotes">–ó–∞–º–µ—Ç–∫–∏:</label>
                <textarea id="editTaskNotes" class="task-detail-textarea" placeholder="–î–æ–±–∞–≤—å—Ç–µ –∑–∞–º–µ—Ç–∫–∏..." ${isCompleted ? 'readonly' : ''}>${escapeHtml(task.notes || '')}</textarea>
            </div>

            <div class="modal-buttons">
                <button id="cancelEditTaskBtn">–ó–∞–∫—Ä—ã—Ç—å</button>
                ${!isCompleted ? '<button id="saveEditTaskBtn">–°–æ—Ö—Ä–∞–Ω–∏—Ç—å</button>' : ''}
            </div>
        </div>`;

        // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ —á–∞—Å—Ç–æ—Ç—ã –≤ select
        const editFreqSelect = taskDetailsModal.querySelector('#editReminderFrequency');
        if (editFreqSelect) editFreqSelect.value = currentSelectedReminderFrequency;

        // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –∫ –∫–Ω–æ–ø–∫–∞–º –∏ –ø–æ–ª—è–º –í–ù–£–¢–†–ò –º–æ–¥–∞–ª–∫–∏
        taskDetailsModal.querySelector('#cancelEditTaskBtn').addEventListener('click', closeTaskDetailsModal);

        if (!isCompleted) {
            taskDetailsModal.querySelector('#saveEditTaskBtn').addEventListener('click', saveEditedTask);
            // –ö–Ω–æ–ø–∫–∏ –æ—Ç–∫—Ä—ã—Ç–∏—è –º–æ–¥–∞–ª–æ–∫ –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã/–Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
            taskDetailsModal.querySelector('#editDueDateBtn').addEventListener('click', (e) => {
                e.stopPropagation(); // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ –º–æ–¥–∞–ª–∫–∏ –¥–µ—Ç–∞–ª–µ–π
                openDatePickerModal();
            });
            taskDetailsModal.querySelector('#editReminderDateBtn').addEventListener('click', (e) => {
                e.stopPropagation();
                openReminderPickerModal();
            });

            // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –ø–æ–ª–µ–π –¥–∞—Ç—ã/–≤—Ä–µ–º–µ–Ω–∏/—á–∞—Å—Ç–æ—Ç—ã –ø—Ä—è–º–æ –≤ –º–æ–¥–∞–ª–∫–µ –¥–µ—Ç–∞–ª–µ–π
            const rdi = taskDetailsModal.querySelector('#editReminderDate');
            const rti = taskDetailsModal.querySelector('#editReminderTime');
            const rfi = taskDetailsModal.querySelector('#editReminderFrequency');

            if(rdi) {
                rdi.addEventListener('change', () => {
                    currentSelectedReminderDate = rdi.value || null;
                    tempSelectedReminderDate = currentSelectedReminderDate; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º temp
                    // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –ø–æ–ª–µ –≤—Ä–µ–º–µ–Ω–∏ –∏ —á–∞—Å—Ç–æ—Ç—ã
                    if(rti) rti.disabled = !currentSelectedReminderDate;
                    if(rfi) rfi.disabled = !currentSelectedReminderDate;
                    if (!currentSelectedReminderDate) { // –ï—Å–ª–∏ –¥–∞—Ç—É —É–±—Ä–∞–ª–∏, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É
                        if(rti) rti.value = '';
                        if(rfi) rfi.value = 'once';
                        currentSelectedReminderTime = null;
                        currentSelectedReminderFrequency = 'once';
                        tempSelectedReminderTime = null;
                        tempSelectedReminderFrequency = 'once';
                    }
                });
            }
             if(rti) {
                 rti.addEventListener('change', () => {
                     currentSelectedReminderTime = rti.value || null;
                     tempSelectedReminderTime = currentSelectedReminderTime; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º temp
                 });
             }
             if(rfi) {
                 rfi.addEventListener('change', () => {
                     currentSelectedReminderFrequency = rfi.value || 'once';
                     tempSelectedReminderFrequency = currentSelectedReminderFrequency; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º temp
                 });
             }

             const ddi = taskDetailsModal.querySelector('#editDueDate');
             const dti = taskDetailsModal.querySelector('#editDueTime');
             if(ddi) {
                 ddi.addEventListener('change', () => {
                     currentSelectedDate = ddi.value || null;
                     tempSelectedDate = currentSelectedDate; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º temp
                 });
             }
             if(dti) {
                 dti.addEventListener('change', () => {
                     currentSelectedTime = dti.value || null;
                     tempSelectedTime = currentSelectedTime; // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º temp
                 });
             }
        }

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
        taskDetailsModal.classList.remove('hidden');
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–∫–æ–Ω–æ–∫/–±—ç–¥–∂–µ–π –ø–æ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º –ø–æ–ª–µ–º –≤–≤–æ–¥–∞
        handleInputChange.call(taskInput);
    }

    function saveEditedTask() {
        if (!currentEditingTaskId || isEditingCompletedTask) return;

        // –°–æ–±–∏—Ä–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø–æ–ª–µ–π –º–æ–¥–∞–ª–∫–∏
        const updatedData = {
            text: taskDetailsModal.querySelector('#editTaskText').value.trim(),
            dueDate: taskDetailsModal.querySelector('#editDueDate').value || null,
            dueTime: taskDetailsModal.querySelector('#editDueTime').value || null,
            reminderDate: taskDetailsModal.querySelector('#editReminderDate').value || null,
            reminderTime: taskDetailsModal.querySelector('#editReminderTime').value || null,
            reminderFrequency: taskDetailsModal.querySelector('#editReminderFrequency').value || 'once',
            notes: taskDetailsModal.querySelector('#editTaskNotes').value.trim()
        };
        // –û–±–Ω–æ–≤–ª—è–µ–º –∏ –æ—Å–Ω–æ–≤–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è (–Ω–∞ —Å–ª—É—á–∞–π –µ—Å–ª–∏ –º–µ–Ω—è–ª–∏ –Ω–∞–ø—Ä—è–º—É—é –≤ –ø–æ–ª—è—Ö)
        currentSelectedDate = updatedData.dueDate;
        currentSelectedTime = updatedData.dueTime;
        currentSelectedReminderDate = updatedData.reminderDate;
        currentSelectedReminderTime = updatedData.reminderTime;
        currentSelectedReminderFrequency = updatedData.reminderFrequency;

        // –í–∞–ª–∏–¥–∞—Ü–∏—è
        if (!updatedData.text) {
            alert('–¢–µ–∫—Å—Ç –∑–∞–¥–∞—á–∏ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º.');
            taskDetailsModal.querySelector('#editTaskText').focus();
            return;
        }
        // –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –∏ –¥–∞—Ç–∞
        if (updatedData.reminderTime && !updatedData.reminderDate) {
            alert('–í—ã–±–µ—Ä–∏—Ç–µ –¥–∞—Ç—É –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –∏–ª–∏ —É–¥–∞–ª–∏—Ç–µ –≤—Ä–µ–º—è.');
            taskDetailsModal.querySelector('#editReminderDate').focus();
            return;
        }
        // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, —Å–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—Ä–µ–º—è –∏ —á–∞—Å—Ç–æ—Ç—É
        if (!updatedData.reminderDate) {
            updatedData.reminderTime = null;
            updatedData.reminderFrequency = 'once';
             // –û–±–Ω–æ–≤–∏–º –∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ —Å–æ—Å—Ç–æ—è–Ω–∏—è –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
             currentSelectedReminderTime = null;
             currentSelectedReminderFrequency = 'once';
        }

        // –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        editTask(currentEditingTaskId, updatedData, false);
        closeTaskDetailsModal(); // –ó–∞–∫—Ä—ã–≤–∞–µ–º –º–æ–¥–∞–ª–∫—É
    }

    // –§—É–Ω–∫—Ü–∏—è –¥–ª—è —ç–∫—Ä–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è HTML (–ø—Ä–æ—Å—Ç–∞—è –∑–∞—â–∏—Ç–∞ –æ—Ç XSS)
    function escapeHtml(unsafe) {
        if (typeof unsafe !== 'string') return unsafe; // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–∞–∫ –µ—Å—Ç—å, –µ—Å–ª–∏ –Ω–µ —Å—Ç—Ä–æ–∫–∞
        return unsafe
             .replace(/&/g, "&amp;")
             .replace(/</g, "&lt;")
             .replace(/>/g, "&gt;")
             .replace(/"/g, "&quot;")
             .replace(/'/g, "&#039;");
     }

    // --- –ü—Ä–æ–≥—Ä–µ—Å—Å –ë–∞—Ä ---
    function updateProgressBar() {
        if (!progressBarInner || !progressPercentage) return;

        const total = tasks.length + completedTasks.length;
        const completed = completedTasks.length;
        const percentage = total === 0 ? 0 : Math.round((completed / total) * 100);

        progressBarInner.style.width = `${percentage}%`;
        progressPercentage.textContent = `${percentage}%`;
    }
    initializeApp();



// –í —Ñ—É–Ω–∫—Ü–∏—é addEventListeners –¥–æ–±–∞–≤–∏–º:
mainCalendar.addEventListener('mousedown', handleCalendarMouseDown);
mainCalendar.addEventListener('mouseover', handleCalendarMouseOver);
document.addEventListener('mouseup', handleCalendarMouseUp);

// –ù–æ–≤—ã–µ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π:
function handleCalendarMouseDown(e) {
    const day = e.target.closest('.calendar-day');
    if (!day) return;
    
    isSelectingDates = true;
    selectionStartDate = day.dataset.date;
    selectionEndDate = day.dataset.date;
    
    clearCalendarSelection();
    updateCalendarSelection();
}

function handleCalendarMouseOver(e) {
    if (!isSelectingDates) return;
    
    const day = e.target.closest('.calendar-day');
    if (!day || !day.dataset.date) return;
    
    selectionEndDate = day.dataset.date;
    updateCalendarSelection();
}

function handleCalendarMouseUp() {
    if (!isSelectingDates) return;
    
    isSelectingDates = false;
    filterTasksBySelectedDates();
}

function clearCalendarSelection() {
    document.querySelectorAll('.calendar-day').forEach(day => {
        day.classList.remove('selecting', 'range-selected');
    });
}

function updateCalendarSelection() {
    const start = parseDateSafe(selectionStartDate);
    const end = parseDateSafe(selectionEndDate);
    
    if (!start || !end) return;
    
    const [minDate, maxDate] = [start, end].sort((a, b) => a - b);
    const minDateStr = minDate.toISOString().split('T')[0];
    const maxDateStr = maxDate.toISOString().split('T')[0];
    
    document.querySelectorAll('.calendar-day').forEach(day => {
        const date = day.dataset.date;
        if (!date) return;
        
        const isInRange = date >= minDateStr && date <= maxDateStr;
        day.classList.toggle('selecting', isInRange);
    });
}

function filterTasksBySelectedDates() {
    const start = parseDateSafe(selectionStartDate);
    const end = parseDateSafe(selectionEndDate);
    if (!start || !end) return;
    
    const [minDate, maxDate] = [start, end].sort((a, b) => a - b);
    const minDateStr = minDate.toISOString().split('T')[0];
    const maxDateStr = maxDate.toISOString().split('T')[0];
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω
    currentCustomFilter = { start: minDateStr, end: maxDateStr };
    
    // –ü—Ä–∏–º–µ–Ω—è–µ–º —Ñ–∏–ª—å—Ç—Ä
    currentTaskFilter = 'custom';
    renderTasks();
    
    // –ü–æ–¥—Å–≤–µ—Ç–∫–∞ –≤ –∫–∞–ª–µ–Ω–¥–∞—Ä–µ
    document.querySelectorAll('.calendar-day').forEach(day => {
        const date = day.dataset.date;
        day.classList.toggle('range-selected', 
            date >= minDateStr && date <= maxDateStr
        );
    });
}

}); // –ö–æ–Ω–µ—Ü DOMContentLoaded